-- SQL Queries for Aggregate Functions, Having, Order By, GroupBy, and Joins

-- 1. List Events and Their Average Ticket Prices

SELECT event_name, AVG(ticket_price) AS avg_ticket_price
FROM Event
GROUP BY event_name

-- 2. Calculate the Total Revenue Generated by Events

SELECT event_name, SUM(ticket_price * (total_seats - available_seats)) AS total_revenue
FROM Event
GROUP BY event_name

-- 3. Find the Event with the Highest Ticket Sales

SELECT TOP 1 event_name, SUM(ticket_price * (total_seats - available_seats)) AS ticket_sales
FROM Event
GROUP BY event_name
ORDER BY ticket_sales DESC

-- 4. Calculate the Total Number of Tickets Sold for Each Event

SELECT event_name, (total_seats - available_seats) AS tickets_sold
FROM Event

-- 5. Find Events with No Ticket Sales

SELECT event_name
FROM Event
WHERE total_seats = available_seats

-- 6. Find the User Who Has Booked the Most Tickets

SELECT TOP 1 c.customer_name, SUM(b.num_tickets) AS total_booked_tickets
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name
ORDER BY total_booked_tickets DESC

-- 7. List Events and the Total Number of Tickets Sold for Each Month

SELECT MONTH(event_date) AS event_month, event_name, SUM(total_seats - available_seats) AS tickets_sold
FROM Event
GROUP BY MONTH(event_date), event_name
ORDER BY event_month

-- 8. Calculate the Average Ticket Price for Events in Each Venue

SELECT v.venue_name, AVG(e.ticket_price) AS avg_ticket_price
FROM Event e
JOIN Venue v ON e.venue_id = v.venue_id
GROUP BY v.venue_name

-- 9. Calculate the Total Number of Tickets Sold for Each Event Type

SELECT event_type, SUM(total_seats - available_seats) AS tickets_sold
FROM Event
GROUP BY event_type

-- 10. Calculate the Total Revenue Generated by Events in Each Year

SELECT YEAR(event_date) AS event_year, SUM(ticket_price * (total_seats - available_seats)) AS total_revenue
FROM Event
GROUP BY YEAR(event_date)
ORDER BY event_year

-- 11. List Users Who Have Booked Tickets for Multiple Events

SELECT c.customer_name
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name
HAVING COUNT(DISTINCT b.event_id) > 1

-- 12. Calculate the Total Revenue Generated by Events for Each User

SELECT c.customer_name, SUM(e.ticket_price * b.num_tickets) AS total_revenue
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
JOIN Event e ON b.event_id = e.event_id
GROUP BY c.customer_name

-- 13. Calculate the Average Ticket Price for Events in Each Category and Venue

SELECT e.event_type, v.venue_name, AVG(e.ticket_price) AS avg_ticket_price
FROM Event e
JOIN Venue v ON e.venue_id = v.venue_id
GROUP BY e.event_type, v.venue_name

-- 14. List Users and the Total Number of Tickets They've Purchased in the Last 30 Days

SELECT c.customer_name, SUM(b.num_tickets) AS total_tickets_purchased
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
WHERE b.booking_date >= GETDATE() - 30
GROUP BY c.customer_name