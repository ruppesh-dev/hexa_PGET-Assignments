-- 14. Find the total number of couriers handled by each employee  

ALTER TABLE Courier  
ADD EmployeeID INT  

ALTER TABLE Courier  
ADD CONSTRAINT FK_Courier_Employee FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID)

UPDATE Courier  
SET EmployeeID = CASE  
    WHEN CourierID = 201 THEN 1  
    WHEN CourierID = 202 THEN 2  
    WHEN CourierID = 203 THEN 3  
    WHEN CourierID = 204 THEN 4  
    WHEN CourierID = 205 THEN 5  
    WHEN CourierID = 206 THEN 6  
    WHEN CourierID = 207 THEN 7  
    WHEN CourierID = 208 THEN 8  
    WHEN CourierID = 209 THEN 9  
    WHEN CourierID = 210 THEN 10  
END

SELECT e.EmployeeID AS Employee_ID, e.Name AS Employee_Name, COUNT(c.CourierID) AS 'Total Couriers Handled'  
FROM Employee e  
JOIN Courier c 
ON e.EmployeeID = c.EmployeeID   
GROUP BY e.EmployeeID, e.Name  
ORDER BY Total_Couriers_Handled DESC  

-- 15. Calculate the total revenue generated by each location  

SELECT l.LocationID AS Location_ID, l.LocationName AS Location_Name, SUM(p.Amount) AS [Total Revenue]
FROM Location l  
JOIN Payment p ON l.LocationID = p.LocationID  
GROUP BY l.LocationID, l.LocationName  
ORDER BY [Total Revenue] DESC  

-- 16. Find the total number of couriers delivered to each location  

SELECT c.ReceiverAddress AS Delivery_Location, COUNT(c.CourierID) AS [Number Of Couriers Delivered]
FROM Courier c  
WHERE c.Status = 'Delivered'  
GROUP BY c.ReceiverAddress  
ORDER BY [Number Of Couriers Delivered] DESC 

-- 17. Find the courier with the highest average delivery time  

SELECT c.CourierID AS Courier_ID, AVG(DATEDIFF(DAY, c.DeliveryDate, p.PaymentDate)) AS [Average Delivery Time] 
FROM Courier c  
JOIN Payment p ON c.CourierID = p.CourierID  
GROUP BY c.CourierID  
ORDER BY [Average Delivery Time] DESC  

-- 18. Find locations with total payments less than a certain amount (e.g., $5000)  

SELECT l.LocationID AS Location_ID, l.LocationName AS Location_Name, SUM(p.Amount) AS "Total Payments" 
FROM Location l  
JOIN Payment p ON l.LocationID = p.LocationID  
GROUP BY l.LocationID, l.LocationName  
HAVING SUM(p.Amount) < 5000  
ORDER BY "Total Payments" ASC  

-- 20. Retrieve couriers who have received payments totaling more than $1000 in a specific location.

SELECT c.CourierID AS Courier_ID, SUM(p.Amount) AS [Total Payments]  
FROM Courier c  
JOIN Payment p ON c.CourierID = p.CourierID  
WHERE p.LocationID = 9
GROUP BY c.CourierID  
HAVING SUM(p.Amount) > 1000  
ORDER BY [Total Payments] DESC  

-- 21. Retrieve couriers who have received payments totaling more than $1000 after a certain date (PaymentDate > 'YYYY-MM-DD')  

SELECT c.CourierID AS Courier_ID, SUM(p.Amount) AS 'Total Payments'  
FROM Courier c  
JOIN Payment p ON c.CourierID = p.CourierID  
WHERE p.PaymentDate > '2025-04-20'  
GROUP BY c.CourierID  
HAVING SUM(p.Amount) > 1000  
ORDER BY 'Total Payments' DESC  

-- 22. Retrieve locations where the total amount received is more than $5000 before a certain date (PaymentDate < 'YYYY-MM-DD')  

SELECT l.LocationID AS Location_ID, l.LocationName AS Location_Name, SUM(p.Amount) AS 'Total Payments' 
FROM Location l  
JOIN Payment p ON l.LocationID = p.LocationID  
WHERE p.PaymentDate < '2025-04-14'  
GROUP BY l.LocationID, l.LocationName  
HAVING SUM(p.Amount) > 5000  
ORDER BY 'Total Payments' DESC  
